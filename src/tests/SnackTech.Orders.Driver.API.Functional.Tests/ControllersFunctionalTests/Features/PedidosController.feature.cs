// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SnackTech.Orders.Driver.API.Functional.Tests.ControllersFunctionalTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PedidosControllerFeature : object, Xunit.IClassFixture<PedidosControllerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PedidosController.feature"
#line hidden
        
        public PedidosControllerFeature(PedidosControllerFeature.FixtureData fixtureData, SnackTech_Orders_Driver_API_Functional_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "ControllersFunctionalTests/Features", "PedidosController", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Iniciar um novo pedido")]
        [Xunit.TraitAttribute("FeatureTitle", "PedidosController")]
        [Xunit.TraitAttribute("Description", "Iniciar um novo pedido")]
        public void IniciarUmNovoPedido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Iniciar um novo pedido", "    Given que eu tenho um CPF válido\r\n    When eu envio uma solicitação para inic" +
                    "iar um pedido\r\n    Then eu devo receber um identificador de pedido", tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Atualizar um pedido")]
        [Xunit.TraitAttribute("FeatureTitle", "PedidosController")]
        [Xunit.TraitAttribute("Description", "Atualizar um pedido")]
        public void AtualizarUmPedido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Atualizar um pedido", "    Given que eu tenho um pedido existente que não está aguardando pagamento\r\n   " +
                    " When eu envio uma solicitação para atualizar o pedido\r\n    Then eu devo receber" +
                    " uma confirmação de sucesso", tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Finalizar pedido para pagamento")]
        [Xunit.TraitAttribute("FeatureTitle", "PedidosController")]
        [Xunit.TraitAttribute("Description", "Finalizar pedido para pagamento")]
        public void FinalizarPedidoParaPagamento()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Finalizar pedido para pagamento", "    Given que eu tenho um pedido existente\r\n    When eu envio uma solicitação par" +
                    "a finalizar o pedido para pagamento\r\n    Then eu devo receber uma confirmação de" +
                    " sucesso", tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Listar pedidos aguardando pagamento")]
        [Xunit.TraitAttribute("FeatureTitle", "PedidosController")]
        [Xunit.TraitAttribute("Description", "Listar pedidos aguardando pagamento")]
        public void ListarPedidosAguardandoPagamento()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Listar pedidos aguardando pagamento", "    When eu envio uma solicitação para listar pedidos aguardando pagamento\r\n    T" +
                    "hen eu devo receber uma lista de pedidos", tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Buscar pedido por identificação")]
        [Xunit.TraitAttribute("FeatureTitle", "PedidosController")]
        [Xunit.TraitAttribute("Description", "Buscar pedido por identificação")]
        public void BuscarPedidoPorIdentificacao()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buscar pedido por identificação", "    Given que eu tenho um identificador de pedido válido\r\n    When eu envio uma s" +
                    "olicitação para buscar o pedido por identificação\r\n    Then eu devo receber os d" +
                    "etalhes do pedido", tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Buscar último pedido do cliente")]
        [Xunit.TraitAttribute("FeatureTitle", "PedidosController")]
        [Xunit.TraitAttribute("Description", "Buscar último pedido do cliente")]
        public void BuscarUltimoPedidoDoCliente()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buscar último pedido do cliente", "    Given que eu tenho um CPF válido\r\n    When eu envio uma solicitação para busc" +
                    "ar o último pedido do cliente\r\n    Then eu devo receber os detalhes do último pe" +
                    "dido", tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Listar pedidos ativos")]
        [Xunit.TraitAttribute("FeatureTitle", "PedidosController")]
        [Xunit.TraitAttribute("Description", "Listar pedidos ativos")]
        public void ListarPedidosAtivos()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Listar pedidos ativos", "    When eu envio uma solicitação para listar pedidos ativos\r\n    Then eu devo re" +
                    "ceber uma lista de pedidos ativos", tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Iniciar preparação de um pedido")]
        [Xunit.TraitAttribute("FeatureTitle", "PedidosController")]
        [Xunit.TraitAttribute("Description", "Iniciar preparação de um pedido")]
        public void IniciarPreparacaoDeUmPedido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Iniciar preparação de um pedido", "    Given que eu tenho um identificador de pedido válido\r\n    When eu envio uma s" +
                    "olicitação para iniciar a preparação do pedido\r\n    Then eu devo receber uma con" +
                    "firmação de sucesso", tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Concluir preparação de um pedido")]
        [Xunit.TraitAttribute("FeatureTitle", "PedidosController")]
        [Xunit.TraitAttribute("Description", "Concluir preparação de um pedido")]
        public void ConcluirPreparacaoDeUmPedido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Concluir preparação de um pedido", "    Given que eu tenho um identificador de pedido válido\r\n    When eu envio uma s" +
                    "olicitação para concluir a preparação do pedido\r\n    Then eu devo receber uma co" +
                    "nfirmação de sucesso", tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Finalizar um pedido")]
        [Xunit.TraitAttribute("FeatureTitle", "PedidosController")]
        [Xunit.TraitAttribute("Description", "Finalizar um pedido")]
        public void FinalizarUmPedido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Finalizar um pedido", "    Given que eu tenho um identificador de pedido válido\r\n    When eu envio uma s" +
                    "olicitação para finalizar o pedido\r\n    Then eu devo receber uma confirmação de " +
                    "sucesso", tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PedidosControllerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PedidosControllerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
